/**
 * Tentackle - a framework for java desktop applications
 * Copyright (C) 2001-2008 Harald Krake, harald@krake.de, +49 7722 9508-0
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

// $Id: HistoryTablePanel.java 336 2008-05-09 14:40:20Z harald $
// Created on June 8, 2005, 12:18 PM

package org.tentackle.appworx;

import org.tentackle.ui.FormTable;
import org.tentackle.ui.FormTableModel;
import org.tentackle.ui.FormTableSorter;
import org.tentackle.ui.FormTableUtilityPopup;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import javax.swing.JLabel;

/**
 * A panel that displays the history objects in a table.
 * 
 * @author harald
 */
public class HistoryTablePanel extends org.tentackle.ui.FormPanel {
  
  private FormTable table;                  // history table
  private FormTableModel model;             // table model
  private FormTableSorter sorter;           // to allow sorting
  
  
  
  /**
   * Creates a history table panel.
   */
  public HistoryTablePanel() {
    initComponents();
  }
  
  
  /**
   * Sets the list of history objects.
   * 
   * @param historyList the list of history objects
   */
  public void setHistoryList(List<History> historyList)  {
    if (historyList != null && historyList.size() > 0)  {
      History first = historyList.get(0);
      model = new FormTableModel(new HistoryTableEntry(first));
      sorter = new FormTableSorter(model);
      table = new FormTable();
      table.setDragEnabled(true);
      table.setName(first.getClassName() + "-table");
      table.setCreateDefaultColumnsFromPreferences(true);
      new FormTableUtilityPopup(table);
      historyScrollPane.setViewportView(table);
      table.setModel(sorter);
      sorter.addPropertyChangeListener(new PropertyChangeListener()  {
        public void propertyChange(PropertyChangeEvent e) {
          if (e.getSource() instanceof FormTableSorter) {
            // set sorting string
            setSorting(((FormTableSorter)(e.getSource())).getSortNames());
          }
        }
      });
      model.listChanged(historyList);
    }
    else  {
      historyScrollPane.setViewportView(
        new JLabel("  < " + Locales.bundle.getString("no_history_available") + " >  ", JLabel.CENTER));
    }
  }
  
  
  /**
   * Sets the database object and loads its history objects.
   * 
   * @param obj the database object
   */
  public void setHistoryForObject(AppDbObject obj) {
    setHistoryList(obj.getHistory().selectByObjectId(obj.getId()));
  }
  
  
  /**
   * Sets the current sorting string.
   */
  private void setSorting(String text)  {
    if (text == null) {
      sortBox.setText(Locales.bundle.getString("unsorted"));
      sortBox.setSelected(false);
      sortBox.setEnabled(false);
    }
    else  {
      sortBox.setText(text);
      sortBox.setSelected(true);
      sortBox.setEnabled(true);
    }
  }

  
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    java.awt.GridBagConstraints gridBagConstraints;

    historyScrollPane = new javax.swing.JScrollPane();
    viewButtonPanel = new org.tentackle.ui.FormPanel();
    sortBox = new org.tentackle.ui.FormRadioButton();
    jLabel1 = new javax.swing.JLabel();

    setLayout(new java.awt.BorderLayout());

    add(historyScrollPane, java.awt.BorderLayout.CENTER);

    viewButtonPanel.setLayout(new java.awt.GridBagLayout());

    sortBox.setFont(new java.awt.Font("Dialog", 0, 12));
    sortBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sortBoxActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    viewButtonPanel.add(sortBox, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    viewButtonPanel.add(jLabel1, gridBagConstraints);

    add(viewButtonPanel, java.awt.BorderLayout.NORTH);

  }//GEN-END:initComponents

  private void sortBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortBoxActionPerformed
    if (sortBox.isSelected() == false) {
      sorter.clearSorting();
      sorter.sort();
      setSorting(null);
    }
  }//GEN-LAST:event_sortBoxActionPerformed
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane historyScrollPane;
  private javax.swing.JLabel jLabel1;
  private org.tentackle.ui.FormRadioButton sortBox;
  private org.tentackle.ui.FormPanel viewButtonPanel;
  // End of variables declaration//GEN-END:variables
  
}

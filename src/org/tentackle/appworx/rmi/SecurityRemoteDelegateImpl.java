/**
 * Tentackle - a framework for java desktop applications
 * Copyright (C) 2001-2008 Harald Krake, harald@krake.de, +49 7722 9508-0
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

// $Id: SecurityRemoteDelegateImpl.java 367 2008-07-20 16:49:01Z harald $

package org.tentackle.appworx.rmi;

import org.tentackle.appworx.Security;
import org.tentackle.db.rmi.RemoteDbSessionImpl;
import java.rmi.RemoteException;
import java.util.List;
import org.tentackle.appworx.ContextDb;
import org.tentackle.util.TrackedArrayList;

/**
 * Implementation of the {@link Security} remote delegate.
 * 
 * @author harald
 */
public class SecurityRemoteDelegateImpl<T extends Security>
             extends AppDbObjectRemoteDelegateImpl<T>
             implements SecurityRemoteDelegate {
  
  /**
   * Creates a security delegate on the session socket.
   *
   * @param session the RMI session
   * @param clazz the subclass of DbObject
   * @throws java.rmi.RemoteException 
   */
  public SecurityRemoteDelegateImpl(RemoteDbSessionImpl session, Class<T> clazz) throws RemoteException {
    super(session, clazz);
  }
  
  
  public void assertRemoteSecurityManagerInitialized(ContextDb contextDb) throws RemoteException {
    try {
      setContextDb(contextDb);
      dbObject.isPermissionAccepted(0);   // sufficient to update the security manager's table
    }
    catch (Exception e) {
      throw new RemoteException("remote assertRemoteSecurityManagerInitialized failed", e);
    }
  }
  
  
  // @wurblet inclrmi Include --missingok .$classname/methods

  // Code generated by wurblet. Do not edit!//GEN-BEGIN:inclrmi


  public List<Security> selectByGrantId(ContextDb contextDb, long grantId) throws RemoteException {
    try {
      setContextDb(contextDb);
      return dbObject.selectByGrantId(grantId);
    }
    catch (Exception e) {
      throw new RemoteException("remote selectByGrantId failed", e);
    }
  }

  public TrackedArrayList<Security> selectByObject(ContextDb contextDb, long objectId, String objectClass) throws RemoteException {
    try {
      setContextDb(contextDb);
      return dbObject.selectByObject(objectId, objectClass);
    }
    catch (Exception e) {
      throw new RemoteException("remote selectByObject failed", e);
    }
  }

  public int deleteByGrantee(long grantId) throws RemoteException {
    try {
      return dbObject.deleteByGrantee(grantId);
    }
    catch (Exception e) {
      throw new RemoteException("remote deleteByGrantee failed", e);
    }
  }

  public int deleteByObject(long objectId, String objectClass) throws RemoteException {
    try {
      return dbObject.deleteByObject(objectId, objectClass);
    }
    catch (Exception e) {
      throw new RemoteException("remote deleteByObject failed", e);
    }
  }

  public int deleteObjectRulesByObjectClass(String objectClass) throws RemoteException {
    try {
      return dbObject.deleteObjectRulesByObjectClass(objectClass);
    }
    catch (Exception e) {
      throw new RemoteException("remote deleteObjectRulesByObjectClass failed", e);
    }
  }

  public int deleteObjectRulesByObjectClassAndContext(String objectClass, long contextId, String contextClass) throws RemoteException {
    try {
      return dbObject.deleteObjectRulesByObjectClassAndContext(objectClass, contextId, contextClass);
    }
    catch (Exception e) {
      throw new RemoteException("remote deleteObjectRulesByObjectClassAndContext failed", e);
    }
  }

  public int deleteObjectRulesByGrantClass(String grantClass) throws RemoteException {
    try {
      return dbObject.deleteObjectRulesByGrantClass(grantClass);
    }
    catch (Exception e) {
      throw new RemoteException("remote deleteObjectRulesByGrantClass failed", e);
    }
  }

  public int deleteObjectRulesByGrantClassAndContext(String grantClass, long contextId, String contextClass) throws RemoteException {
    try {
      return dbObject.deleteObjectRulesByGrantClassAndContext(grantClass, contextId, contextClass);
    }
    catch (Exception e) {
      throw new RemoteException("remote deleteObjectRulesByGrantClassAndContext failed", e);
    }
  }

  // End of wurblet generated code.//GEN-END:inclrmi
 
}
